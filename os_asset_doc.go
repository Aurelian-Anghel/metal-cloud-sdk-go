// DO NOT EDIT: this file is automatically generated by docgen
package metalcloud

import (
	"github.com/projectdiscovery/yamldoc-go/encoder"
)

var OSAssetDoc encoder.Doc

func init() {
	OSAssetDoc.Type = "OSAsset"
	OSAssetDoc.Comments[encoder.LineComment] = "OSAsset struct defines a server type"
	OSAssetDoc.Description = "OSAsset struct defines a server type"
	OSAssetDoc.Fields = make([]encoder.Doc, 15)
	OSAssetDoc.Fields[0].Name = "id"
	OSAssetDoc.Fields[0].Type = "int"
	OSAssetDoc.Fields[0].Note = ""
	OSAssetDoc.Fields[0].Description = "Id of the object"
	OSAssetDoc.Fields[0].Comments[encoder.LineComment] = "Id of the object"
	OSAssetDoc.Fields[1].Name = "ownerID"
	OSAssetDoc.Fields[1].Type = "int"
	OSAssetDoc.Fields[1].Note = ""
	OSAssetDoc.Fields[1].Description = "Id of the owner of this object"
	OSAssetDoc.Fields[1].Comments[encoder.LineComment] = "Id of the owner of this object"
	OSAssetDoc.Fields[2].Name = "userIDAuthenticated"
	OSAssetDoc.Fields[2].Type = "int"
	OSAssetDoc.Fields[2].Note = ""
	OSAssetDoc.Fields[2].Description = "Id of the user who created this object (may be different than the owner). Readonly."
	OSAssetDoc.Fields[2].Comments[encoder.LineComment] = "Id of the user who created this object (may be different than the owner). Readonly."
	OSAssetDoc.Fields[3].Name = "fileName"
	OSAssetDoc.Fields[3].Type = "string"
	OSAssetDoc.Fields[3].Note = ""
	OSAssetDoc.Fields[3].Description = "The file name as it will be seen in the final template"
	OSAssetDoc.Fields[3].Comments[encoder.LineComment] = "The file name as it will be seen in the final template"
	OSAssetDoc.Fields[4].Name = "fileSizeBytes"
	OSAssetDoc.Fields[4].Type = "int"
	OSAssetDoc.Fields[4].Note = ""
	OSAssetDoc.Fields[4].Description = "The size of the file"
	OSAssetDoc.Fields[4].Comments[encoder.LineComment] = "The size of the file"
	OSAssetDoc.Fields[5].Name = "fileMime"
	OSAssetDoc.Fields[5].Type = "string"
	OSAssetDoc.Fields[5].Note = ""
	OSAssetDoc.Fields[5].Description = "Type of file as a mime type. Both types are stored in the database but the text type will be interpreted for variables."
	OSAssetDoc.Fields[5].Comments[encoder.LineComment] = "Type of file as a mime type. Both types are stored in the database but the text type will be interpreted for variables."
	OSAssetDoc.Fields[5].Values = []string{
		"application/octet-stream",
		"text/plain",
	}
	OSAssetDoc.Fields[6].Name = "templateType"
	OSAssetDoc.Fields[6].Type = "string"
	OSAssetDoc.Fields[6].Note = ""
	OSAssetDoc.Fields[6].Description = "Type of asset. Required for text type files. It controls the type of template language used when interpreting the files. Simple - uses simple search and replace. Advanced - uses jinja2 template language."
	OSAssetDoc.Fields[6].Comments[encoder.LineComment] = "Type of asset. Required for text type files. It controls the type of template language used when interpreting the files. Simple - uses simple search and replace. Advanced - uses jinja2 template language."
	OSAssetDoc.Fields[6].Values = []string{
		"none",
		"simple",
		"advanced",
	}
	OSAssetDoc.Fields[7].Name = "contentBase64"
	OSAssetDoc.Fields[7].Type = "string"
	OSAssetDoc.Fields[7].Note = ""
	OSAssetDoc.Fields[7].Description = "the actual contents in base64 format."
	OSAssetDoc.Fields[7].Comments[encoder.LineComment] = "the actual contents in base64 format."
	OSAssetDoc.Fields[8].Name = "contentSHA256Hex"
	OSAssetDoc.Fields[8].Type = "string"
	OSAssetDoc.Fields[8].Note = ""
	OSAssetDoc.Fields[8].Description = "A hash of the content"
	OSAssetDoc.Fields[8].Comments[encoder.LineComment] = "A hash of the content"
	OSAssetDoc.Fields[9].Name = "usage"
	OSAssetDoc.Fields[9].Type = "string"
	OSAssetDoc.Fields[9].Note = ""
	OSAssetDoc.Fields[9].Description = "description: The asset's intended usage\nvalues:\n	 - build_component\n"
	OSAssetDoc.Fields[9].Comments[encoder.LineComment] = "description: The asset's intended usage"
	OSAssetDoc.Fields[10].Name = "sourceURL"
	OSAssetDoc.Fields[10].Type = "string"
	OSAssetDoc.Fields[10].Note = ""
	OSAssetDoc.Fields[10].Description = "If set then the content of this asset will not be stored in the database. Instead it will be pulled from this URL when needed."
	OSAssetDoc.Fields[10].Comments[encoder.LineComment] = "If set then the content of this asset will not be stored in the database. Instead it will be pulled from this URL when needed."
	OSAssetDoc.Fields[11].Name = "variables"
	OSAssetDoc.Fields[11].Type = "[]string"
	OSAssetDoc.Fields[11].Note = ""
	OSAssetDoc.Fields[11].Description = "A list of required custom variables for the asset to be generated. Automatically generated by parsing the file."
	OSAssetDoc.Fields[11].Comments[encoder.LineComment] = "A list of required custom variables for the asset to be generated. Automatically generated by parsing the file."
	OSAssetDoc.Fields[12].Name = "tags"
	OSAssetDoc.Fields[12].Type = "[]string"
	OSAssetDoc.Fields[12].Note = ""
	OSAssetDoc.Fields[12].Description = "A list o tags"
	OSAssetDoc.Fields[12].Comments[encoder.LineComment] = "A list o tags"
	OSAssetDoc.Fields[13].Name = "createdTimestamp"
	OSAssetDoc.Fields[13].Type = "string"
	OSAssetDoc.Fields[13].Note = ""
	OSAssetDoc.Fields[13].Description = "ISO 8601 timestamp which holds the date and time when the asset was created."
	OSAssetDoc.Fields[13].Comments[encoder.LineComment] = "ISO 8601 timestamp which holds the date and time when the asset was created."
	OSAssetDoc.Fields[14].Name = "updatedTimestamp"
	OSAssetDoc.Fields[14].Type = "string"
	OSAssetDoc.Fields[14].Note = ""
	OSAssetDoc.Fields[14].Description = "ISO 8601 timestamp which holds the date and time when the asset was last updated."
	OSAssetDoc.Fields[14].Comments[encoder.LineComment] = "ISO 8601 timestamp which holds the date and time when the asset was last updated."
}

func (OSAsset) Doc() *encoder.Doc {
	return &OSAssetDoc
}

// GetOSAssetDoc returns documentation for the file ./.
func GetOSAssetDoc() *encoder.FileDoc {
	return &encoder.FileDoc{
		Name:        "OSAsset",
		Description: "",
		Structs: []*encoder.Doc{
			&OSAssetDoc,
		},
	}
}
